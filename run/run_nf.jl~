using Pkg
Pkg.activate("/home/manu/Documents/Work/NormalFormAE/.")
using NormalFormAE, Flux, Zygote, Plots, DifferentialEquations
include("/home/manu/Documents/Work/NormalFormAE/problems/nf.jl")
include("/home/manu/Documents/Work/NFAE_old/run/run_nf.jl")

x_model_name = :nf
z_model_name = :Hopf
x_dim = 128
par_dim = 1
z_dim = 2
tsize = 500
tspan = [0.0,200.0]
xVar = 0.1
aVar = 0.5
mean_ic_x = [0.0] 
mean_ic_a = [0.0]
x_rhs = dxdt_rhs
x_solve = dxdt_solve 
 

model_x = xModel(x_model_name, x_dim, par_dim, tsize,tspan,xVar,aVar,mean_ic_x,mean_ic_a,x_rhs,x_solve, args)
model_z = NormalForm(:Hopf,z_dim ,par_dim, dzdt_rhs, dzdt_solve)

state = AE(:State, 128,2, [64,32,16],:elu,gpu)
par = AE(:Par, 1,1,[16,16],:elu,gpu)
trans = nothing


tscale_init = [1f0] |> gpu

training_size = 1000
test_size = 100


data_dir = "NormalFormAEData"

P_reg = [1.0f0, 1.0f0, 1.0f0, 0.001f0, 0.001f0, 1.0f0, 1.0f0]


nfae = NFAE(:nf, :Hopf, model_x, model_z, training_size, test_size, state, par, nothing, tscale_init,
                       P_reg,gpu, 10,20,0.1,data_dir)


load_posttrain(nfae)

test_x = nothing
test_dx = nothing
test_a = nothing

if length(size(nfae.test_data["x"])) == 3
    global test_x, test_dx, test_a
    test_x = reduce(hcat,[nfae.test_data["x"][:,:,i] for i in 1:size(nfae.test_data["x"])[end]])
    test_dx = reduce(hcat,[nfae.test_data["dx"][:,:,i] for i in 1:size(nfae.test_data["dx"])[end]])
    test_a = nfae.test_data["alpha"]
else
    global test_x, test_dx, test_a
    test_x = nfae.test_data["x"]
    test_dx  =nfae.test_data["dx"]
    test_a = nfae.test_data["alpha"]
end

loss = nfae(test_x,test_dx,test_a)

p = gen_plot(nfae.model_z.z_dim, nfae.nPlots)
plotter(nfae,1,p,cpu(test_x),cpu(test_a),0.1,0.1)


